<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-12T22:52:11+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Creative Reflective Journal</title><subtitle>My Creative Reflective Journal as part of the Falmouth University Creative App Development Masters Degree programme.</subtitle><entry><title type="html">Week 2 - Considering progamming languages</title><link href="http://localhost:4000/2019/02/09/week-two-programming-languages.html" rel="alternate" type="text/html" title="Week 2 - Considering progamming languages" /><published>2019-02-09T00:00:00+00:00</published><updated>2019-02-09T00:00:00+00:00</updated><id>http://localhost:4000/2019/02/09/week-two-programming-languages</id><content type="html" xml:base="http://localhost:4000/2019/02/09/week-two-programming-languages.html">&lt;p&gt;Having spent a not insignificant  amount time working with SQL Server and other database technologies, whilst also dipping my toes into PHP, Visual Basic, HTML and basic JavaScript, it was refreshing and satisfying to find myself fortuitously thrust into a new team, assembled for the purpose of designing and implementing a brand new database-connected web application, built on SQL Server and extensively utilising the classic and celebrated web dev triumvirate of .NET MVC, WCF and HTML5 (as in the full definition of HTML5, which somehow modestly includes JavaScript/jQuery and CSS3). It was very much ‘in at the deep end’, but a fantastic platform for learning – not just about the bleeding edge languages, frameworks and platforms, but also development practice. Agile was part of this new, exciting world, as was working with a team of experienced contractors whose experience and knowledge were available on tap. I found myself immersed in full-stack dev heaven!&lt;br /&gt;&lt;br /&gt; 
It’s interesting, looking back, at how time can actually appear to move slower than changes in must-have developmental knowledge and practice, tools, languages and platforms. In many ways, trends that are current in early 2019 could be seen appearing on the horizon way back in 2013 when I embarked on this journey. The power of web-based development was firmly establishing itself in the browser – &lt;a href=&quot;https://javascript.info/&quot;&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/a&gt;, being the language of the browser, was becoming a necessity and, to me, a very exciting one at that. Functional programming in JavaScript – as close to object-oriented programming for the very front-end web as you were ever to find, was the need-to-learn paradigm. Some of the frameworks that were appearing, such as &lt;a href=&quot;https://knockoutjs.com/&quot;&gt;&lt;strong&gt;Knockout.js&lt;/strong&gt;&lt;/a&gt; seemed to allow ‘magic’ to happen when building interactive and responsive user interfaces in the browser. This, combined with Ajax calls to the database, with data being returned to the browser as JSON objects and used by JavaScript, often via one of these aforementioned frameworks, to immediately update the waiting web-page, seemed to me to be the direction I simply had to follow. The old idea of building everything server-side before rendering it in the client was fast becoming the proverbial dinosaur of web development.
Moving into current times, frameworks based on JavaScript are now appearing at quite a rate.  The ‘single-page’ app is the mecca for web-devs. To this end, I’ve begun to immerse myself in &lt;a href=&quot;https://angular.io/&quot;&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/a&gt; – which heavily uses &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt; (a strongly-typed class-based superset of JavaScript) and its own style of developmental structural ‘scaffolding’ to provide an environment for developing fully-fledged client-side web applications. Other options for obtaining similar ends also exist, such as &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://vuejs.org/&quot;&gt;&lt;strong&gt;Vue.js&lt;/strong&gt;&lt;/a&gt;, each with its own take on ways of creating JavaScript apps that work and provide reactive and responsive solutions within the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The single-page app&lt;/strong&gt;&lt;br /&gt;
Providing a similar experience to that of mobile devices, it’s not a total surprise that JavaScript frameworks have been appropriated as technologies that can be used to build native mobile apps for both iOS and Android, without having to learn their respective native languages - &lt;a href=&quot;https://swift.org/&quot;&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html&quot;&gt;&lt;strong&gt;ObjectC&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.java.com/en/&quot;&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/a&gt;. &lt;a href=&quot;http://www.reactnative.com/&quot;&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.nativescript.org/&quot;&gt;&lt;strong&gt;NativeScript&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://ionicframework.com/&quot;&gt;&lt;strong&gt;Ionic&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://phonegap.com/&quot;&gt;&lt;strong&gt;PhoneGap&lt;/strong&gt;&lt;/a&gt; make use of JavaScript, in their own particular way. Other options include &lt;a href=&quot;https://flutter.io/?gclid=Cj0KCQiA-onjBRDSARIsAEZXcKa_RmzwoRaIL4tCBVMGfMAyOAmt35eWUqE67Lrq4SBpCUvr2A0eq9YaAuLGEALw_wcB&quot;&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;/a&gt; – the new kid on a block of mostly new kids – using &lt;a href=&quot;https://www.dartlang.org/&quot;&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;/a&gt; as its programming language, and &lt;a href=&quot;https://visualstudio.microsoft.com/xamarin/&quot;&gt;&lt;strong&gt;Xamarin&lt;/strong&gt;&lt;/a&gt;, which has been around longer and incorporates Microsoft’s .NET framework and C# as its inspiration. As a creative developer, it can be difficult to know which of these frameworks in which you should throw yourself, if not all. As learning more than one new language is, at best, not easy, learning one at a time would appear the best option.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native vs hybrid&lt;/strong&gt;&lt;br /&gt;
Worthy of consideration is how desirable, or necessary, are truly native apps when compared with non-native, or hybrid, options. In the case of the latter, the app is essentially a web application wrapped in a browser. A  main difference is in terms of the better performance shown by native apps, as well as their ability to directly access native APIs. Examples of going native include &lt;strong&gt;React Native, NativeScript&lt;/strong&gt; and &lt;strong&gt;Flutter&lt;/strong&gt;, whereas  ensconced web browser options could be provided by &lt;strong&gt;Ionic, PhoneGap&lt;/strong&gt; or, arguably, &lt;strong&gt;Xamarin&lt;/strong&gt;. I write ‘arguably’ because there appears to be some disagreement about whether Xamarin can be classed as native. To me, Xamarin appears to perhaps be closer to native than not, as it is compiled into a low-level native binary code and uses native UI controls, whereas wrappers used by Ionic – Cordova / PhoneGap – rely on purpose-build APIs for such access.  This may not be important, but it’s worth noting.&lt;br /&gt;&lt;br /&gt;
Personally, I have begun investigating and investing in Angular and NativeScript. This is partly because the structural nature of Angular appealed to me, as did the strongly-typed nature of TypeScript, which enhances and extends the flexibility of JavaScript - a language I’ve already enjoyed delving into for a number of years - whilst the fact that the end result is compiled into JavaScript, allowing highly interactive websites and web apps, and into native Android and iOS apps for good performance on mobile devices.
However, also on my horizon for some future attention are Flutter and Swift. There appears to be a lot of interest in the &lt;strong&gt;Flutter&lt;/strong&gt; framework, particularly with regard to the ability to directly access the screen via low-level rendering using Google’s Skia graphics library, along with its interfacing with platform-specific SDKs of both Android and iOS. It also appears to allow for fairly rapid development – partly due to low re-build times during development (&lt;a href=&quot;https://medium.com/@dev.n/why-flutter-an-android-developers-take-dd2b6033029c&quot;&gt;see article in medium.com&lt;/a&gt;).&lt;br /&gt;
&lt;strong&gt;Swift&lt;/strong&gt; appears to be a recommended language across the dev community and, although originally intended for iOS, it has gone open source and gained the ability to compile code for the Android platform (&lt;a href=&quot;https://blog.readdle.com/why-we-use-swift-for-android-db449feeacaf&quot;&gt;see this interesting blog&lt;/a&gt;) &lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Unity and C#&lt;/strong&gt;&lt;br /&gt;
I have only recently begun looking at Unity in terms of understanding how 2D &amp;amp; 3D animations and Augmented Reality can be created. As I already know C# I see this as helping create a relatively smooth learning curve, although I have very little experience of the Unity environment itself. AR, the relation and integration between location, reality and imaginary is certainly something that holds my interest. As a maker of music and practitioner of the ‘sonic arts’ I would also like to explore any potential there may exist between real and imaginary that is not simply visual, but also aural and sensuary in a wider context. I am so far unsure what platforms and programming languages would be worth persuing to these ends.&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Coming up..&lt;/strong&gt;
&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;,
&lt;a href=&quot;http://skilldrick.github.io/easy6502/&quot;&gt;Assembly&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Having spent a not insignificant amount time working with SQL Server and other database technologies, whilst also dipping my toes into PHP, Visual Basic, HTML and basic JavaScript, it was refreshing and satisfying to find myself fortuitously thrust into a new team, assembled for the purpose of designing and implementing a brand new database-connected web application, built on SQL Server and extensively utilising the classic and celebrated web dev triumvirate of .NET MVC, WCF and HTML5 (as in the full definition of HTML5, which somehow modestly includes JavaScript/jQuery and CSS3). It was very much ‘in at the deep end’, but a fantastic platform for learning – not just about the bleeding edge languages, frameworks and platforms, but also development practice. Agile was part of this new, exciting world, as was working with a team of experienced contractors whose experience and knowledge were available on tap. I found myself immersed in full-stack dev heaven! It’s interesting, looking back, at how time can actually appear to move slower than changes in must-have developmental knowledge and practice, tools, languages and platforms. In many ways, trends that are current in early 2019 could be seen appearing on the horizon way back in 2013 when I embarked on this journey. The power of web-based development was firmly establishing itself in the browser – JavaScript, being the language of the browser, was becoming a necessity and, to me, a very exciting one at that. Functional programming in JavaScript – as close to object-oriented programming for the very front-end web as you were ever to find, was the need-to-learn paradigm. Some of the frameworks that were appearing, such as Knockout.js seemed to allow ‘magic’ to happen when building interactive and responsive user interfaces in the browser. This, combined with Ajax calls to the database, with data being returned to the browser as JSON objects and used by JavaScript, often via one of these aforementioned frameworks, to immediately update the waiting web-page, seemed to me to be the direction I simply had to follow. The old idea of building everything server-side before rendering it in the client was fast becoming the proverbial dinosaur of web development. Moving into current times, frameworks based on JavaScript are now appearing at quite a rate. The ‘single-page’ app is the mecca for web-devs. To this end, I’ve begun to immerse myself in Angular – which heavily uses TypeScript (a strongly-typed class-based superset of JavaScript) and its own style of developmental structural ‘scaffolding’ to provide an environment for developing fully-fledged client-side web applications. Other options for obtaining similar ends also exist, such as React and Vue.js, each with its own take on ways of creating JavaScript apps that work and provide reactive and responsive solutions within the browser.</summary></entry><entry><title type="html">Week 1 - The Creative Piece</title><link href="http://localhost:4000/2019/02/04/week-one-creative-assignment.html" rel="alternate" type="text/html" title="Week 1 - The Creative Piece" /><published>2019-02-04T00:00:00+00:00</published><updated>2019-02-04T00:00:00+00:00</updated><id>http://localhost:4000/2019/02/04/week-one-creative-assignment</id><content type="html" xml:base="http://localhost:4000/2019/02/04/week-one-creative-assignment.html">&lt;h3 id=&quot;master-jammer&quot;&gt;Master Jammer&lt;/h3&gt;

&lt;p&gt;“&lt;em&gt;As long as we have each other we will never run out of problems&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;The line seems to resonate with something I have some experience with, i.e. music. This phrase could easily have been written about music itself, which can be easily seen as the presentation and attempted resolution of a series of problems. Apart from some very determined attempts in the realm of the avant-garde to detach musical production from its human-centred origins, much of what drives this production is our social nature and our determination to move forward with new ideas and to formulate responses to what has come before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;I began to think of how this process may be formalised into actions that could be crystallised within the medium of an app.&lt;/em&gt;&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Musical collaboration and how it (sometimes) works&lt;/strong&gt;&lt;br /&gt;
I focused on the idea of multiple musicians creating musical ideas that pose questions that demand responses from their peers.  Looking at how musicians in a band often write songs together, whether this is via a relatively loose process of ‘jamming’ or by sitting down and meticulously working through and developing ideas, I began to see it as essentially a process whereby &lt;strong&gt;&lt;em&gt;possible musical solutions are developed as a response to being confronted by a series of musical problems&lt;/em&gt;&lt;/strong&gt;.  In this case, the chosen, ‘successful’ solution, is the one that wins through on consensus.  It is the one that draws the most admiration from those participating. Essentially, it is a form of democracy.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not just a jam on a telephone line&lt;/strong&gt;&lt;br /&gt;
I started by trying to find a formal solution to the problem of musicians, potentially dispersed across great distances, coming together in order to make music collaboratively. Rather than simply providing an open channel on the internet and providing a facility for musicians to jam their ideas across what would, in essence, be a high-quality telephone line, to an extent I wanted to deconstruct and formalise the &lt;strong&gt;&lt;em&gt;actual processes of producing collaborative music&lt;/em&gt;&lt;/strong&gt;, to bake them into something that is an &lt;strong&gt;&lt;em&gt;interesting and unique activity in its own right&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A game of musical collaboration&lt;/strong&gt;&lt;br /&gt;
As the idea developed, I began to see how this process could be structured along workflow lines similar in some respects to a game.  The graphic below provides an attempt at mapping out one way of achieving this. I am sure that there are many ways and directions this concept could be developed. However, I decided to adhere to one possible avenue and see where it leads:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The game could be initialised by agreeing, at the outset, the constraints of a recognisable song structure. For example, &lt;em&gt;ABABCBD&lt;/em&gt; – or &lt;em&gt;verse, chorus, verse, chorus, middle eight, chorus, outro&lt;/em&gt;. Then additional formal structures could also be agreed upon, such as measure and tempo, say &lt;em&gt;4/4 time at 120bpm&lt;/em&gt;. These need not be set in stone and could potentially be amended during the game (see the graphic outline below). Drum beats could be provided as an option, along with a backing track or a chord progression, thus providing over-arching music constraints, or a restrictive ‘template’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The musicians – or ‘players’ - would decide who is to kick-start the process and provide the first phrase, theme or ‘riff’.  Alternatively, the app itself could kick start proceedings with an internally-generated or pre-recorded theme.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each player would then have the opportunity to play their response to that theme. Once all players have submitted their responses, everyone will vote on their favourite. Players would be prevented from voting for their own. The winning phrase would then be appended to the track and the others put into a ‘theme pot’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Points would be accumulated when a player’s idea wins the vote.  The build-up of points would allow successful players to replace phrases or themes with their preferred options, or even to suggest amendments to the arrangement itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The game would end when the agreed arrangement put forward at the start (and potentially amended during the game) has been completed. The winner will be the player who has had the biggest influence on the resulting song/track/masterpiece and, as a consequence, will have accumulated the most points.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\images\jam-master-map.jpg&quot; alt=&quot;jam-master-map&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Musicality at a premium?&lt;/strong&gt;&lt;br /&gt;
A significant challenge would be to make the app responsive in a way that is acceptable to musicians. If the game is to be close to being jam-like in its ambitions (without necessarily being an actual jam) then a live feel must be maintained with a fast-paced and relatively immediate ‘question-response’ flow.  It would be possible to adopt a more studious approach, where musicians work through their ideas in a more considered and controlled manner, but this would be quite a departure from the original concept where a maintained pace and immediacy would enhance the game with an increased sense of jeopordy and, consequently, fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audio streaming, virtual instruments or MIDI?&lt;/strong&gt;&lt;br /&gt;
Game-play is one thing - the medium is quite another.  I envisaged this as being a live play-along / play-together concept using live audio streaming via a microphone. However, it could be that virtual instruments, or even MIDI, be used instead of real instruments.  In this scenario, players would select their chosen instrument and a graphical interface would facilitate live playing.  This would likely be a piano-style keyboard but there is potential to experiment with different and unique methods of converting musical gestures into musical reality. The technology required for each of these options would be very different and each has its own appeals, advantages and shortcomings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical issues&lt;/strong&gt;&lt;br /&gt;
Live streaming over the internet is inherently compromised by the inevitability of time-lag, or latency. This would clearly be a problem when streaming live audio. However, it may be possible to avoid most, if not all, such problems if the game-play is such that no actual live streaming is used. For example, players would not necessary need to play in real-time with other players. Instead, it may be that they would each play along with the recorded arrangement as it exists &lt;em&gt;thus far&lt;/em&gt;, adding their own part to submit for peer voting. If it is not possible to totally avoid playing together live, then it seems that the &lt;strong&gt;best latency avoidance (i.e. ping time) currently achieved averages around 40ms&lt;/strong&gt;, which may be perfectly serviceable in the context of this app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s already available on the market?&lt;/strong&gt;&lt;br /&gt;
There are a number of website / app-based options facilitating musicians playing live over an internet connection. There tends to be an issue with latency / real-time lag that has not genuinely been overcome, although various efforts have been made.  Generally, though, they current offerings appear to be similar in terms of scope and ambition, offering from one or all of a selection of live jamming, online recording, social interaction &amp;amp; affirmation, collaboration and cloud-based sharing. 
My research did not uncover anything similar to this concept in terms of work-flow or a creation-collaboration game.&lt;/p&gt;

&lt;p&gt;Examples are:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ejamming.com&quot;&gt;eJamming&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Jamming over the internet.  A  simple concept that seems to work, although the demo on YouTube, to my ears, suffers slightly from latency (lag), albeit small.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.jamkazam.com&quot;&gt;JamKazam&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Another jamming tool, but appears to be a hardware rather than software solution - the website does not make it very clear how this works. It appears that the idea is that musicians play along to backing tracks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://jammr.net&quot;&gt;Jammr&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Another jamming tool - currently in beta. Looks simple and straightforward and claims zero latency. I have not been able to test the claim of achieving zero latency, but I have doubts as to whether this is currently possible, particularly as no rivals appear to make such a claim.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.avid.com/pro-tools/cloud-collaboration&quot;&gt;Avid Cloud Collaboration for Pro Tools&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Remote recording using the Avid Pro Tools platform&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://llcon.sourceforge.net/&quot;&gt;Jamulus&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Open source. Requires 200 kbps for both upstream and downstream. 40ms average latency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.soundtrap.com&quot;&gt;Soundtrap&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Cloud-based onine music and podcast recording&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://music.pibox.com&quot;&gt;pibox&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Mix reviewing, communication, file sharing, and cloud storage&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.vampr.me&quot;&gt;vampr&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
Mobile: Android &amp;amp; iOS
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Further possibilities&lt;/strong&gt;&lt;br /&gt;
The interactive nature of an online music collaboration or jamming concept is fascinatingly open to the potential of enhancement and the development of ideas beyond connecting and interacting in a purely audio environment. I would be interested in exploring the possibilities of connecting visually and immersively, into areas of &lt;strong&gt;virtual and augmented reality&lt;/strong&gt;. The potential for musicians to immerse themselves in a virtual environment in which they could play alongside each other could be extremely exciting. Facial recognition and ‘super-imposition’ technologies could potentially allow musicians to experience &lt;strong&gt;playing alongside anyone, or anything, in a place of their own choosing&lt;/strong&gt;, including with ‘celebrities’ or even fictitious cartoon creations of their own making or purchased from an online library of characters.&lt;/p&gt;</content><author><name></name></author><summary type="html">Master Jammer</summary></entry></feed>