---
layout: post
title: Week 2 - Thoughts on progamming languages and platforms
published: true
---

Having spent a not insignificant  amount time working with SQL Server and other database technologies, whilst also dipping my toes into PHP, Visual Basic, HTML and basic JavaScript, it was refreshing and satisfying to find myself fortuitously thrust into a new team, assembled for the purpose of designing and implementing a brand new database-connected web application, built on SQL Server and extensively utilising the classic and celebrated web dev triumvirate of .NET MVC, WCF and HTML5 (as in the full definition of HTML5, which somehow modestly includes JavaScript/jQuery and CSS3). It was very much ‘in at the deep end’, but a fantastic platform for learning – not just about the bleeding edge languages, frameworks and platforms, but also development practice. Agile was part of this new, exciting world, as was working with a team of experienced contractors whose experience and knowledge were available on tap. I found myself immersed in full-stack dev heaven!<br><br> 
It’s interesting, looking back, at how time can actually appear to move slower than changes in must-have developmental knowledge and practice, tools, languages and platforms. In many ways, trends that are current in early 2019 could be seen appearing on the horizon way back in 2013 when I embarked on this journey. The power of web-based development was firmly establishing itself in the browser – JavaScript, being the language of the browser, was becoming a necessity and, to me, a very exciting one at that. Functional programming in JavaScript – as close to object-oriented programming for the very front-end web as you were ever to find, was the need-to-learn paradigm. Some of the frameworks that were appearing, such as Knockout.js seemed to allow ‘magic’ to happen when building interactive and responsive user interfaces in the browser. This, combined with Ajax calls to the database, with data being returned to the browser as JSON objects and used by JavaScript, often via one of these aforementioned frameworks, to immediately update the waiting web-page, seemed to me to be the direction I simply had to follow. The old idea of building everything server-side before rendering it in the client was fast becoming the proverbial dinosaur of web development.
Moving into current times, frameworks based on JavaScript are now appearing at quite a rate.  The ‘single-page’ app is the mecca for web-devs. To this end, I’ve begun to immerse myself in Angular – which heavily uses TypeScript (a strongly-typed class-based superset of JavaScript) and its own style of developmental structural ‘scaffolding’ to provide an environment for developing client-side, fully-fledged web applications. Other options for obtaining similar ends also exist, such as React and Vue.js, each with its own take on ways of creating JavaScript apps that work and provide reactive and responsive solutions within the browser.

**The single-page app**<br>
Providing a similar experience to that of mobile devices, it’s not a total surprise that JavaScript frameworks have been appropriated as technologies that can be used to build native mobile apps for both iOS and Android, without having to learn their respective native languages - Swift, ObjectC, Java or Kotlin. React Native, NativeScript and Ionic make use of JavaScript, in their own particular way. Other options include Flutter – the new kid on the block - a block that consist of mostly new kids – using Dart as its programming language, and Xamarin, which has been around longer and incorporates Microsoft’s .NET framework and C# as its inspiration. As a creative developer, it can be difficult to know which of these frameworks in which you should throw yourself, if not all. As learning more than one new language is, at best, not easy, learning one at a time would appear the best option.<br><br>

**Native vs non-native**<br>
Worthy of consideration is whether or not truly native apps are desirable or necessary when compared with non-native options where the app is, in essence, a web application wrapped in a disguised browser; going native could be via React Native, NativeScript or Flutter, whereas the ensconced  web app option could be provided by Ionic or, arguably, Xamarin. I write ‘arguably’ because there appears to be some disagreement about what is native and what is not. To me, Xamarin appears to perhaps be closer to native than not, as it is compiled into a low-level native binary code and uses native UI controls, whereas wrappers used by Ionic – Cordova / PhoneGap – rely on purpose-build APIs for such access.  This may not be important, but it's worth noting.<br><br>
Personally, I have begun investing in Angular and NativeScript. This is partly because the structural nature of Angular appealed to me, as did the strongly-typed nature of TypeScript, which enhances and extends the flexibility of JavaScript - a language I'd already enjoyed delving into for a number of years - whilst the fact that the end result is compiled into JavaScript, allowing highly interactive websites and web apps, and into native Android and iOS apps for good performance on mobile devices.
However, also on my horizon for some future attention are Flutter and Swift. There appears to be a lot of interest in the Flutter framework, particularly with regard to the ability to directly access the screen via low-level rendering using Google’s Skia graphics library, along with its interfacing with platform-specific SDKs of both Android and iOS. It also appears to allow for fairly rapid development – partly due to low re-build times during development ([article in medium.com](https://medium.com/@dev.n/why-flutter-an-android-developers-take-dd2b6033029c)).<br><br>
**Unity and C#**
I have only recently begun looking at Unity in terms of understanding how 2D & 3D animations and Augmented Reality can be created. As I already know C# I see this as helping create a relatively smooth learning curve, although I have very little experience of the Unity environment itself. AR, the integration and relationship between location, reality and imagination is certainly something that holds a fascination for me. As a musician and sound ‘artist’ I also would like to explore any potential there may exist between real and imaginary that is not simply visual, but also aural and sensual in a wider context.




